#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function

import re
import sys

import argparse
import jinja2


parser = argparse.ArgumentParser(
    prog='regen_authorized_keys',
    description='regenerate authorized_keys'
)
parser.add_argument(
    '-i', '--input', dest='input', default=None, help='input file'
)
parser.add_argument(
    '-o', '--output', dest='output', default=None, help='output file'
)
parser.add_argument(
    '--command', dest='command', required=True,
    help='command for reformat(jinja2 template language)'
)

_find_unsafe = re.compile(r'[^\w@%+=:,./-]').search


def quote(s):
    """Return a shell-escaped version of the string *s*."""
    if not s:
        return "''"
    if _find_unsafe(s) is None:
        return s

    # use single quotes, and put single quotes into double quotes
    # the string $'b is then quoted as '$'"'"'b'
    return "'" + s.replace("'", "'\"'\"'") + "'"


class KeysReGenerator(object):
    kCommandPrefix = 'command='
    kTemplateGlobals = dict(
        shquote=quote,
    )

    def __init__(self, command, ifp=sys.stdin, ofp=sys.stdout):
        self.ifp = ifp
        self.ofp = ofp
        self.command = command
        self.templates = {}

    def render_template(self, command, context):
        template = self.templates.get(command, None)
        if template is None:
            env = jinja2.Environment()
            template = env.from_string(command, globals=self.kTemplateGlobals)
            self.templates[command] = template
        return template.render(context)

    def close(self):
        if self.ifp is not sys.stdin:
            self.ifp.close()
        if self.ofp is not sys.stdout:
            self.ofp.close()

    def parse_line_options(self, line):
        skip = 0
        quoted = None

        index = 0
        option = ''
        options = []
        for index, ch in enumerate(line, 1):
            if skip > 0:
                skip -= 1
            else:
                if ch == " ":
                    if quoted is None:
                        break
                elif ch == ",":
                    if quoted is None:
                        if option:
                            options.append(option)
                        option = ''
                        continue
                elif ch == "\\":
                    skip += 1
                elif ch in ['"', "'"]:
                    if quoted is None:
                        quoted = ch
                    elif quoted == ch:
                        quoted = None
            option += ch

        if option:
            options.append(option)
        if quoted:
            raise ValueError("cannot parse option: %s" % repr(line))
        return options, line[index:]

    def parse_line_fields(self, line):
        if line.startswith('ssh-'):
            options, rest = [], line
        else:
            options, rest = self.parse_line_options(line)

        fields = rest.split(' ', 2)
        if len(fields) in (2, 3):
            key_type = fields[0]
            pubkey = fields[1]
            if len(fields) == 3:
                comment = fields[2]
            else:
                comment = None
            if key_type.startswith('ssh-'):
                return options, key_type, pubkey, comment

        raise ValueError("cannot parse line: %s" % repr(rest))

    def process_line(self, line):
        line = line.strip()
        if not line or line.startswith('#'):
            regen_line = line
        else:
            options, key_type, pubkey, comment = self.parse_line_fields(line)

            regen_command = self.render_template(
                self.command,
                dict(
                    keytype=key_type,
                    pubkey=pubkey,
                    comment=comment,
                )
            )
            if not isinstance(regen_command, basestring) or not regen_command:
                return

            regen_option = '%s"%s"' % (self.kCommandPrefix, regen_command)
            regen_index = -1
            for index, option in enumerate(options):
                if option.startswith(self.kCommandPrefix):
                    regen_index = index
                    break

            regen_options = list(options)
            if regen_index >= 0:
                regen_options[regen_index] = regen_option
            else:
                regen_options.insert(0, regen_option)
            regen_fields = [','.join(regen_options), key_type, pubkey]
            if comment:
                regen_fields.append(comment)
            regen_line = ' '.join(regen_fields)
        print(regen_line, file=self.ofp)

    def process(self):
        for line in self.ifp:
            self.process_line(line)


def main():
    args = parser.parse_args()
    kwargs = {}
    if args.input:
        kwargs['ifp'] = open(args.input, 'r')
    if args.output:
        kwargs['ofp'] = open(args.output, 'w')
    generator = KeysReGenerator(args.command, **kwargs)
    try:
        generator.process()
    finally:
        generator.close()


if __name__ == '__main__':
    main()
